{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "f07e664c-6dee-30f9-8612-4ef74446432a",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "123632df-6dab-36f1-9012-a89ccfa7cdb3",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "38c574f4-d740-3c9d-83b0-18cf6eda9002",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "f4757717-199d-370b-a444-ec9d51b7fa5d",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "2d016286-ef90-324e-a77b-048b4b544f65",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "cbf30816-7687-3e07-8fae-9373ea03363c",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "a4baf86d-aa81-3ded-872d-cf18ba06294c",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "25a01729-4acc-324f-be6a-186927840611",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "e777be76-c18c-3f37-8231-155615975031",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "f4e5d803-f8be-3abf-a10c-1a6cab2055b5",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "34747d87-62dc-360a-8937-d7d5c9a44838",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "e4da4022-1efb-3585-ab69-df7c1c4b8537",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "eb686e0b-4335-3ffa-af45-72ab94936f93",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "97318dd2-fdc5-3a78-820f-ddae3ee407cc",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "013d3177-c8dd-3044-9c78-909b3fd1bbb4",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "2bda93d9-4670-39a4-9636-d194a126c944",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "f8d77a48-93cc-356c-850a-7ab569ba1e71",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "863c7dd1-b4b8-32b3-a7cf-b657c7d5f96b",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "eff37f9a-34b1-3732-8b62-b93395348b46",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "758736dc-ee32-3cd3-8ddb-94e5ae54c5fa",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "c5c0c0ea-66a5-37f1-8ba7-fdb59ab7d6b1",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "33a81805-a64d-3c77-be8c-a5c8e37c92b8",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "674df4b6-de59-3553-9230-a3ef5c97a423",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0aa3d63d-db3a-3b62-b48c-5fdde7048ba3",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "5f79a695-42c1-3737-9566-16f8fd574e1e",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "e8b8075f-172b-312e-86dd-cb234c593977",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "92a86201-16e8-348e-add7-12651912e7d5",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "1ef135c1-2ba0-33ce-9bc9-78e2781e71a0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "a4e2c31c-d5b2-34fc-962a-eee8d417630e",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "18016330-7354-3568-ac52-0f8b66dc6ec3",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "43619da1-b4ab-3745-949b-5e573018f17a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "9b59e8c1-359f-39f2-b91d-0c6a1c244220",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "19ecf606-a8b6-3c6e-9315-12bf72365644",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "069304d0-2b97-380c-8695-44c990a8b6b0",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "6c211460-e255-3d6d-96f4-3765f37c0093",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "509a74fc-b1d6-3160-b6bd-20fbc8ced016",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "cfe831a7-eddc-3ed9-9819-452681bed473",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "9f1dfd43-0995-3a03-98ff-ccde3dd55d80",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "29fb4f8e-7a3c-3198-b1cb-3efd366c3d5f",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "deb50ef7-8b48-377e-b697-222d8f600502",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "5fa497f2-ef4f-3f08-9f88-5713a8c3f7bf",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "d126696f-0432-3cac-a467-a44253eb5b42",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "9ff08890-9b07-3dad-b41b-1689417f2af4",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "ea3246c2-9f1e-3802-b21c-5ba3958dca57",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "8c75ea0c-fa81-339f-a86f-df5d774ab77d",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "ec03ac2f-375a-3024-8d2a-01776a6abd7f",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "51df3b52-fef8-33e4-857d-aa66eeee4741",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "f07e664c-6dee-30f9-8612-4ef74446432a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/Coach_ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 13,
                  "endLine": 144,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            Pickler(f).dump(self.trainExamplesHistory)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "195e9013465a1f882d161a5aac486ee60f8385ec9288da3aab6ea502eede975fadedd00311cb263ac8f654d2072381fdb452da466f8868478340235507c49bb8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "123632df-6dab-36f1-9012-a89ccfa7cdb3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/Coach.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 45,
                  "endLine": 153,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                self.trainExamplesHistory = Unpickler(f).load()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "51d1c779ed9a28582a54045e7fc02311351d6a3c12e37656ca4ee56c45ae063ff95739745bbf5ce262cecc915ffc488990141c3a5904e623699c3773be96dd14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "38c574f4-d740-3c9d-83b0-18cf6eda9002",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/Coach.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 13,
                  "endLine": 139,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            Pickler(f).dump(self.trainExamplesHistory)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aada04d69576f90f2f0214fca2ffdc0d05aa49fef7c233933e60632075b52a284f904bb5b2efb43f9858fb6cbab9f953225aec675666de1778b17e8a6828ee61_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f4757717-199d-370b-a444-ec9d51b7fa5d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/Coach_ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 45,
                  "endLine": 158,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                self.trainExamplesHistory = Unpickler(f).load()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "36c65f2bfbf2d06608a2d5d59d18ed142a2b3e1a448e2c8cdf9a6ffcc689b171ad9b3844fbdcf3bf9721906310d93ab47a03a62dcfde99c3f599c282659f10e7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2d016286-ef90-324e-a77b-048b4b544f65",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/othello/pytorch/NNet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 22,
                  "endLine": 119,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        checkpoint = torch.load(filepath, map_location=map_location)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d2ff77b12ff150f7dcda525b08c3390e3de57030b64af05a2f8d23e920b2927e61d0bf991c029e8548f41a8a559d7da139d1b9a401562bc4b6aa5d187e548f9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "cbf30816-7687-3e07-8fae-9373ea03363c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/othello/pytorch/NNet_ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 9,
                  "endLine": 137,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        torch.save({\n            'state_dict': self.nnet.state_dict(),\n        }, filepath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "02da959cf889a52e459f72c2a1f313350c7fea898fd07af2ba829f31c52cd46f0e9ca456637c3f8289a673bf24d6556a273f1c2e2fcdb76a68ce9c1886a54497_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a4baf86d-aa81-3ded-872d-cf18ba06294c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/othello/pytorch/NNet_ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 22,
                  "endLine": 145,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        checkpoint = torch.load(filepath, map_location=map_location)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "02da959cf889a52e459f72c2a1f313350c7fea898fd07af2ba829f31c52cd46f0e9ca456637c3f8289a673bf24d6556a273f1c2e2fcdb76a68ce9c1886a54497_1"
          },
          "properties": {}
        },
        {
          "ruleId": "25a01729-4acc-324f-be6a-186927840611",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/othello/pytorch/NNet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 111,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        torch.save({\n            'state_dict': self.nnet.state_dict(),\n        }, filepath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d2ff77b12ff150f7dcda525b08c3390e3de57030b64af05a2f8d23e920b2927e61d0bf991c029e8548f41a8a559d7da139d1b9a401562bc4b6aa5d187e548f9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e777be76-c18c-3f37-8231-155615975031",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deep_speech_2/preprocess.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "endLine": 81,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            tar = tarfile.open(target_filename)\n            tar.extractall(split_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8c727813830d77ee2985ce734ddfa0a53615d641a6baa90cdfdec5e6915beb8041dfab4c2757bdae79329c5cacd0edc0613512132fa7d9b16cc061013d02dbea_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f4e5d803-f8be-3abf-a10c-1a6cab2055b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD requirements.txt ."
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "90a1db66889c49edf0d1cc3d6b897db869ad0c1075c9b2ac22580ea1ba832d48cdef3ae368ab4a896e62a917963be65e136468bce8face1091ed3921e633bf79_0"
          },
          "properties": {}
        },
        {
          "ruleId": "34747d87-62dc-360a-8937-d7d5c9a44838",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/pit.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 58,
                  "snippet": {
                    "text": "n1p = lambda x: np.argmax(mcts1.getActionProb(x, temp=0))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "076c11f0f4459ac66446f28fcdcf97cff0033c418a98aa2c570b0092e6cb7f58faa5c606833a0ca11557390c8009d207e5d6dd8ab4a63139132551027213d6b5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e4da4022-1efb-3585-ab69-df7c1c4b8537",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alpha_zero_othello/pit.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 21,
                  "endLine": 48,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    n2p = lambda x: np.argmax(mcts2.getActionProb(x, temp=0))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "076c11f0f4459ac66446f28fcdcf97cff0033c418a98aa2c570b0092e6cb7f58faa5c606833a0ca11557390c8009d207e5d6dd8ab4a63139132551027213d6b5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "eb686e0b-4335-3ffa-af45-72ab94936f93",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 22,
                  "snippet": {
                    "text": "RUN pip install torch==1.3.1"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "518abf79acfc228e71c378c7b1f8746baf4e38c76032dd9fb35fe985a1d885115c9e928adb527046239ff1f1bd37a0d3a7fae00e93bc554722423af2db5d93a8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "97318dd2-fdc5-3a78-820f-ddae3ee407cc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN pip install -r requirements.txt"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f6ff4b074d727a7c9892a0793ed553b8a00b44d987e615d9b3198cf918b37cafba6db9ac5ad95f4221e4aa0815ceaa862dd40b2d8155078b6a070e4840ae0fb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "013d3177-c8dd-3044-9c78-909b3fd1bbb4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/bind.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "endLine": 7,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    r = os.popen(\"taskset -pc {} {}\".format(cpu_id, pid).strip())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b03af27cd00ede524950cd0af712b52ab357c4260234ae674a4472eb48b1dc1d8ca8ab51e3cb81df28bc777a474498ea08aa7a5128d93065b9df3f465d54603b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2bda93d9-4670-39a4-9636-d194a126c944",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD . ."
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "90a1db66889c49edf0d1cc3d6b897db869ad0c1075c9b2ac22580ea1ba832d48cdef3ae368ab4a896e62a917963be65e136468bce8face1091ed3921e633bf79_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f8d77a48-93cc-356c-850a-7ab569ba1e71",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 9,
                  "endLine": 216,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        self.file = open(data_file, 'rb')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d5d36ef2a56f056d086ee5c60a63ad5c00ea2d6db0a0d1ff2ce7181c2daa24cba7ac193f4ffc602737014f461039e3b79b79f5d15f8ecf3c173e65c2ac55481e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "863c7dd1-b4b8-32b3-a7cf-b657c7d5f96b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 21,
                  "endLine": 330,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    binary_loader = torch.utils.data.DataLoader(\n        dataset_binary,\n        batch_size=None,\n        shuffle=False,\n        num_workers=0,\n        collate_fn=None,\n        pin_memory=False,\n        drop_last=False,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da041cf3b79c1b2c1c7b52c7815c99fd5107e841db7ed9566b9ce1a4e15e0c32cfb70477c2e5332bd204c1d3abef12f20b61ea6a9e4db31f347d774a84d436ac_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eff37f9a-34b1-3732-8b62-b93395348b46",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 23,
                  "endLine": 351,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    original_loader = torch.utils.data.DataLoader(\n        original_dataset,\n        batch_size=2048,\n        shuffle=False,\n        num_workers=0,\n        collate_fn=collate_wrapper_criteo,\n        pin_memory=False,\n        drop_last=False,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da041cf3b79c1b2c1c7b52c7815c99fd5107e841db7ed9566b9ce1a4e15e0c32cfb70477c2e5332bd204c1d3abef12f20b61ea6a9e4db31f347d774a84d436ac_1"
          },
          "properties": {}
        },
        {
          "ruleId": "758736dc-ee32-3cd3-8ddb-94e5ae54c5fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 24,
                  "endLine": 282,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(\n            train_data,\n            batch_size=mini_batch_size,\n            shuffle=False,\n            num_workers=0,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39f446d831b22598ea79ba70689f11bb78488e5057f9917ab9103d89e9433a935bc8c0bbc6fdc82c64595682b4c0df5fc21a72988d66fe2ee5ebf9baa25cbd7d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c5c0c0ea-66a5-37f1-8ba7-fdb59ab7d6b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 31,
                  "endLine": 822,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        map(lambda tuple_x_k: tuple_x_k[1] / float(l), dc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c03b4310845c40b0529cb18aed52ac74afbc70590ab59dcdd71f5fa9379c75ca1f05972a48ca65181b0b0e7b36dd1ac801e2c16ecfb40ca0ab279c4bb864562c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "33a81805-a64d-3c77-be8c-a5c8e37c92b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 23,
                  "endLine": 292,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        test_loader = torch.utils.data.DataLoader(\n            test_data,\n            batch_size=test_mini_batch_size,\n            shuffle=False,\n            num_workers=0,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39f446d831b22598ea79ba70689f11bb78488e5057f9917ab9103d89e9433a935bc8c0bbc6fdc82c64595682b4c0df5fc21a72988d66fe2ee5ebf9baa25cbd7d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "674df4b6-de59-3553-9230-a3ef5c97a423",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 42,
                  "endLine": 820,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    list_sd = list(map(lambda tuple_x_k: tuple_x_k[0], dc))  # x = tuple_x_k[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c03b4310845c40b0529cb18aed52ac74afbc70590ab59dcdd71f5fa9379c75ca1f05972a48ca65181b0b0e7b36dd1ac801e2c16ecfb40ca0ab279c4bb864562c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0aa3d63d-db3a-3b62-b48c-5fdde7048ba3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 28,
                  "endLine": 457,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            train_loader = torch.utils.data.DataLoader(\n                train_data,\n                batch_size=None,\n                batch_sampler=None,\n                shuffle=False,\n                num_workers=0,\n                collate_fn=None,\n                pin_memory=False,\n                drop_last=False,\n                sampler=RandomSampler(train_data) if args.mlperf_bin_shuffle else None\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f79a695-42c1-3737-9566-16f8fd574e1e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 27,
                  "endLine": 478,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            test_loader = torch.utils.data.DataLoader(\n                test_data,\n                batch_size=None,\n                batch_sampler=None,\n                shuffle=False,\n                num_workers=0,\n                collate_fn=None,\n                pin_memory=False,\n                drop_last=False,\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e8b8075f-172b-312e-86dd-cb234c593977",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 23,
                  "endLine": 570,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        test_loader = torch.utils.data.DataLoader(\n            test_data,\n            batch_size=args.test_mini_batch_size,\n            shuffle=False,\n            num_workers=args.test_num_workers,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_3"
          },
          "properties": {}
        },
        {
          "ruleId": "92a86201-16e8-348e-add7-12651912e7d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 20,
                  "endLine": 767,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    train_loader = torch.utils.data.DataLoader(\n        train_data,\n        batch_size=1,\n        shuffle=False,\n        num_workers=args.num_workers,\n        collate_fn=collate_wrapper_random,\n        pin_memory=False,\n        drop_last=False,  # True\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_4"
          },
          "properties": {}
        },
        {
          "ruleId": "1ef135c1-2ba0-33ce-9bc9-78e2781e71a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 24,
                  "endLine": 560,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(\n            train_data,\n            batch_size=args.mini_batch_size,\n            shuffle=False,\n            num_workers=args.num_workers,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "a4e2c31c-d5b2-34fc-962a-eee8d417630e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 19,
                  "endLine": 777,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    test_loader = torch.utils.data.DataLoader(\n        test_data,\n        batch_size=1,\n        shuffle=False,\n        num_workers=args.num_workers,\n        collate_fn=collate_wrapper_random,\n        pin_memory=False,\n        drop_last=False,  # True\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52bc53dd4f9fafaf1931f1a36f8d36c2947daf060812bf89b7726c3cbd42d332d7d97d2d6e42854dafd9b9cbb82aab44e0cec3bf217de96fc6913abd8dac3e8d_5"
          },
          "properties": {}
        },
        {
          "ruleId": "18016330-7354-3568-ac52-0f8b66dc6ec3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 31,
                  "endLine": 1270,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        map(lambda tuple_x_k: tuple_x_k[1] / float(l), dc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "886d08bdb256d9bd5f4544d78508d1b617f9bd9e10998084239446a22038f5c0070f912b70377e7ee9ca84b92fcfef16b8485d6113ef9e15306db7a90d4cba56_1"
          },
          "properties": {}
        },
        {
          "ruleId": "43619da1-b4ab-3745-949b-5e573018f17a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1268,
                  "startColumn": 42,
                  "endLine": 1268,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    list_sd = list(map(lambda tuple_x_k: tuple_x_k[0], dc))  # x = tuple_x_k[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "886d08bdb256d9bd5f4544d78508d1b617f9bd9e10998084239446a22038f5c0070f912b70377e7ee9ca84b92fcfef16b8485d6113ef9e15306db7a90d4cba56_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9b59e8c1-359f-39f2-b91d-0c6a1c244220",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 17,
                  "endLine": 596,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                return self.create_sequential_forward_ops()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "824f92f1443b6b4ba3a82000a3ffdb363df3aaca8bcc49b4bf80b66820d230c6e787052de2f9ec273ca912c2761842e4979dc17b62584ce812d411ec30eab5d1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "19ecf606-a8b6-3c6e-9315-12bf72365644",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 17,
                  "endLine": 598,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                return self.create_parallel_forward_ops()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "824f92f1443b6b4ba3a82000a3ffdb363df3aaca8bcc49b4bf80b66820d230c6e787052de2f9ec273ca912c2761842e4979dc17b62584ce812d411ec30eab5d1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "069304d0-2b97-380c-8695-44c990a8b6b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 23,
                  "endLine": 211,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            std_dev = np.sqrt(2 / (m + n))  # np.sqrt(1 / m) # np.sqrt(1 / n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "edd8966d6cdee8ee7bda89c3ab1dc8fb5e02b6f4d688b58c3968d5fa1c07b24edec0e138f9079b4460d2c510b3b19077f9b4e0c0b38ab9cbd6c5c749ff0590d0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6c211460-e255-3d6d-96f4-3765f37c0093",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 23,
                  "endLine": 213,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            std_dev = np.sqrt(1 / m)  # np.sqrt(2 / (m + 1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "edd8966d6cdee8ee7bda89c3ab1dc8fb5e02b6f4d688b58c3968d5fa1c07b24edec0e138f9079b4460d2c510b3b19077f9b4e0c0b38ab9cbd6c5c749ff0590d0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "509a74fc-b1d6-3160-b6bd-20fbc8ced016",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 21,
                  "endLine": 381,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                    np.fromstring(args.loss_weights, dtype=float, sep=\"-\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2beb62a0823a45a1e660e7e6c897f92518cc7c66c2a47978c5ad53fceba62634a1f680cadd337f6f27979368b9552344e3f0259b092db04f85b202db3b3234d1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cfe831a7-eddc-3ed9-9819-452681bed473",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1387,
                  "startColumn": 28,
                  "endLine": 1391,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                ld_model = torch.load(\n                    args.load_model,\n                    map_location=torch.device(\"cuda\")\n                    # map_location=lambda storage, loc: storage.cuda(0)\n                )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "496d908ebf786a2c4856906837f3f04396b6f6d2941f66954b18d8716e0d6a101055cb5ca7fca12416843a6374ea22d5c7a6625209665977e79fa0f684ea7453_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9f1dfd43-0995-3a03-98ff-ccde3dd55d80",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 24,
                  "endLine": 1394,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            ld_model = torch.load(args.load_model, map_location=torch.device(\"cpu\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "496d908ebf786a2c4856906837f3f04396b6f6d2941f66954b18d8716e0d6a101055cb5ca7fca12416843a6374ea22d5c7a6625209665977e79fa0f684ea7453_2"
          },
          "properties": {}
        },
        {
          "ruleId": "29fb4f8e-7a3c-3198-b1cb-3efd366c3d5f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 28,
                  "endLine": 1383,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                ld_model = torch.load(args.load_model)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "496d908ebf786a2c4856906837f3f04396b6f6d2941f66954b18d8716e0d6a101055cb5ca7fca12416843a6374ea22d5c7a6625209665977e79fa0f684ea7453_0"
          },
          "properties": {}
        },
        {
          "ruleId": "deb50ef7-8b48-377e-b697-222d8f600502",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1686,
                  "startColumn": 29,
                  "endLine": 1686,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                            torch.save(model_metrics_dict, args.save_model)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "496d908ebf786a2c4856906837f3f04396b6f6d2941f66954b18d8716e0d6a101055cb5ca7fca12416843a6374ea22d5c7a6625209665977e79fa0f684ea7453_3"
          },
          "properties": {}
        },
        {
          "ruleId": "5fa497f2-ef4f-3f08-9f88-5713a8c3f7bf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "output_dir == output_dir is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/tools/visualize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 942,
                  "startColumn": 8,
                  "endLine": 942,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if output_dir == \"\":"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "047331917c1b5502574bbc02aa02b8001062bb44326462e8f860fc37db3d20d98f9fc7ff8fb2660fe0ced48eb439c68315780bca7f635d5db4373a4121c7b014_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d126696f-0432-3cac-a467-a44253eb5b42",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/tools/visualize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 20,
                  "endLine": 1001,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        ld_model = torch.load(args.load_model, map_location=torch.device(\"cpu\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "04803f000c0fbdb87d757bc2c8544e960b3fe6c881a0256ec6579e3d281a2db5b7859c4e814736f359bff8bc7b8dd4f30adb3210f285689029f95a0df4a54c83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9ff08890-9b07-3dad-b41b-1689417f2af4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 36,
                  "endLine": 135,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        self.num_embeddings = [int(np.ceil(num_categories / num_collisions)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "696c0b445a3f330f4e18fcda690b82a26c11ce30b5c8c531393f0a49ee22e7afa12f42f3119ede34771d96c1c8ec78b277452d2132b6e9de97eae9eb33fb8194_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ea3246c2-9f1e-3802-b21c-5ba3958dca57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 41,
                  "endLine": 153,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        nn.init.uniform_(self.weight_q, np.sqrt(1 / self.num_categories))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c25b4bf97f03f0ea23c544475cd51ee98a20b70e28f5760e23e46fea6f0fe66561adc5e42df64a02e4f0f493c8555f315b35bf813118271a30067f9f5f3875d3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8c75ea0c-fa81-339f-a86f-df5d774ab77d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dlrm/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 41,
                  "endLine": 154,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        nn.init.uniform_(self.weight_r, np.sqrt(1 / self.num_categories))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c25b4bf97f03f0ea23c544475cd51ee98a20b70e28f5760e23e46fea6f0fe66561adc5e42df64a02e4f0f493c8555f315b35bf813118271a30067f9f5f3875d3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ec03ac2f-375a-3024-8d2a-01776a6abd7f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "resnet50/torch_resnet50.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 24,
                  "endLine": 108,
                  "endColumn": 118,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=args.batch_size, sampler=None, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39f9f6f2eff62ed0086e79f695c271c1a76f38c823163ba7e23ed4db5bacf7ea5672b795743093863d5477098f461c0f0368fd3112a34204a92fbb4d3f1b05a0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "51df3b52-fef8-33e4-857d-aa66eeee4741",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "resnet50/torch_resnet50_ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 20,
                  "endLine": 129,
                  "endColumn": 123,
                  "snippet": {
                    "text": "    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=args.batch_size, sampler=train_sampler, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a7259185dea695c8483aabd0699b0a93cc04232a695d8969051f62846f05071b4ff834e7090ca0b31f9f211c08ea49faa8bdf6fceac0f6421ed80a40cb48df1a_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}